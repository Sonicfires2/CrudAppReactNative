# Mobile App Overview

This README provides an overview of the key components used to build a functional mobile app using React Native. Each component is explained with its purpose, how it works, and why it is essential to the app.

## **Key Components**

### **1. Persistent Storage**
#### Code: `AsyncStorage`
```javascript
import AsyncStorage from "@react-native-async-storage/async-storage";

// Fetch data from AsyncStorage
useEffect(() => {
  const fetchData = async () => {
    try {
      const jsonValue = await AsyncStorage.getItem("TodoApp");
      const storageTodo = jsonValue != null ? JSON.parse(jsonValue) : [];
      setTodos(storageTodo.sort((a, b) => b.id - a.id));
    } catch (e) {
      console.error(e);
    }
  };
  fetchData();
}, []);

// Save data to AsyncStorage whenever todos change
useEffect(() => {
  const storeData = async () => {
    try {
      const jsonValue = JSON.stringify(todos);
      await AsyncStorage.setItem("TodoApp", jsonValue);
    } catch (e) {
      console.error(e);
    }
  };
  storeData();
}, [todos]);
```

**How it Works:**
- Enables persistent memory for storing data locally on the device.
- Ensures user data is retained even after the app is closed or restarted.
- Retrieves data during initialization and updates data whenever the `todos` state changes.

---

### **2. Theme and Appearance Handling**
#### Code: `ThemeContext`
```javascript
const { colorScheme, setColorScheme, theme } = useContext(ThemeContext);

<Pressable
  onPress={() => setColorScheme(colorScheme === "light" ? "dark" : "light")}
  style={{ marginLeft: 10 }}
>
  {colorScheme === "dark" ? (
    <Octicons name="moon" size={36} color={theme.text} />
  ) : (
    <Octicons name="sun" size={36} color={theme.text} />
  )}
</Pressable>;
```

**How it Works:**
- Manages light and dark mode using `ThemeContext`.
- Dynamically updates colors based on the `colorScheme`.

---

### **3. Safe Area Handling**
#### Code: `SafeAreaView`
```javascript
import { SafeAreaView } from "react-native-safe-area-context";

<SafeAreaView style={styles.container}>
  {/* Other components */}
</SafeAreaView>;
```

**How it Works:**
- Ensures content does not overlap system UI areas (e.g., status bar or notches).
- Provides a consistent layout across devices.

---

### **4. Status Bar Customization**
#### Code: `StatusBar`
```javascript
import { StatusBar } from "expo-status-bar";

<StatusBar style={colorScheme === "dark" ? "light" : "dark"} />;
```

**How it Works:**
- Configures the status bar appearance to match the theme.

---

### **5. Fonts for Consistent Styling**
#### Code: Google Fonts
```javascript
import { Inter_500Medium, useFonts } from "@expo-google-fonts/inter";

const [loaded, error] = useFonts({
  Inter_500Medium,
});

if (!loaded && !error) {
  return null; // Wait for fonts to load
}
```

**How it Works:**
- Loads and applies custom fonts asynchronously.

---

### **6. Animations**
#### Code: `Animated.FlatList`
```javascript
import Animated, { LinearTransition } from "react-native-reanimated";

<Animated.FlatList
  data={todos}
  renderItem={renderItem}
  keyExtractor={(todo) => todo.id}
  contentContainerStyle={{ flexGrow: 1 }}
  itemLayoutAnimation={LinearTransition}
  keyboardDismissMode="on-drag"
/>;
```

**How it Works:**
- Adds smooth animations for list updates.

---

### **7. Input Handling**
#### Code: `TextInput`
```javascript
<TextInput
  style={styles.input}
  placeholder="Add a new todo"
  placeholderTextColor="gray"
  value={text}
  onChangeText={setText}
/>;
```

**How it Works:**
- Captures user input for tasks.
- Dynamically updates the `text` state.

---

### **8. Lists for Dynamic Content**
#### Code: `FlatList`
```javascript
<FlatList
  data={todos}
  renderItem={renderItem}
  keyExtractor={(todo) => todo.id}
/>;
```

**How it Works:**
- Displays a scrollable list of items efficiently.

---

### **9. Icons**
#### Code: `MaterialCommunityIcons` and `Octicons`
```javascript
import MaterialCommunityIcons from "@expo/vector-icons/MaterialCommunityIcons";
import Octicons from "@expo/vector-icons/Octicons";

<MaterialCommunityIcons name="delete-circle" size={36} color="red" />;
<Octicons name="moon" size={36} color={theme.text} />;
```

**How it Works:**
- Adds visual elements (icons) to improve UI clarity and aesthetics.

---

### **10. Essential Styling**
#### Code: `StyleSheet`
```javascript
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: theme.background },
  inputContainer: { flexDirection: "row", alignItems: "center", padding: 10 },
  input: { flex: 1, borderColor: "gray", borderWidth: 1, padding: 10 },
  addButton: { backgroundColor: theme.button, padding: 10, borderRadius: 5 },
});
```

**How it Works:**
- Provides consistent styling across the app.
- Optimized for performance using `StyleSheet`.

---

## **General Components a Mobile App Needs**

1. **UI Layout:**
   - `View`, `SafeAreaView` for containers.
2. **Theme and Appearance:**
   - Dynamic styling with `Context` or state.
3. **Persistent Data:**
   - `AsyncStorage` for local storage.
4. **User Input:**
   - `TextInput` for interactivity.
5. **Dynamic Lists:**
   - `FlatList` for rendering data.
6. **Icons:**
   - Visual aids using `expo-vector-icons`.
7. **Animations:**
   - Smooth transitions with `react-native-reanimated`.
8. **Status Bar:**
   - Customizing the native status bar for a polished experience.
9. **Styling:**
   - `StyleSheet` for performance-optimized styles.

These components collectively build the foundation of a modern, functional mobile app!

